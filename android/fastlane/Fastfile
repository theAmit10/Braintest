# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# default_platform(:android)

# platform :android do
#   desc "Runs all the tests"
#   lane :test do
#     gradle(task: "test")
#   end

#   desc "Submit a new Beta Build to Crashlytics Beta"
#   lane :beta do
#     gradle(task: "clean assembleRelease")
#     crashlytics
  
#     # sh "your_script.sh"
#     # You can also use other beta testing services here
#   end

#   desc "Deploy a new version to the Google Play"
#   lane :deploy do
#     gradle(task: "clean assembleRelease")
#     upload_to_play_store
#   end
# end

default_platform(:android)

platform :android do
  desc "Increment version and build AAB"
  lane :build do
    increment_version_code
    increment_version_name
    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: File.expand_path("..", __dir__)
    )
  end

  desc "Build and upload to Play Store (closed testing)"
  lane :upload_to_playstore do
    build
    upload_to_play_store(
      track: 'alpha',  # Use 'alpha' for closed testing
      aab: './app/build/outputs/bundle/release/app-release.aab',
      json_key: './playstore-credentials.json',
      skip_upload_apk: true  # This tells fastlane to ignore any APK files
    )
  end

  private_lane :increment_version_code do
    gradle_file = "../app/build.gradle"
    content = File.read(gradle_file)
    current_version_code = content.match(/versionCode\s+(\d+)/)[1].to_i
    new_version_code = current_version_code + 1
    UI.message("Incrementing versionCode from #{current_version_code} to #{new_version_code}")
    content.gsub!(/versionCode\s+\d+/, "versionCode #{new_version_code}")
    File.write(gradle_file, content)
  end

  private_lane :increment_version_name do
    gradle_file = "../app/build.gradle"
    content = File.read(gradle_file)
    current_version_name = content.match(/versionName\s+"(\d+\.\d+\.\d+)"/)[1]
    segments = current_version_name.split('.').map(&:to_i)
    segments[2] += 1 # increment patch version
    new_version_name = segments.join('.')
    UI.message("Incrementing versionName from #{current_version_name} to #{new_version_name}")
    content.gsub!(/versionName\s+"[^"]+"/, "versionName \"#{new_version_name}\"")
    File.write(gradle_file, content)
  end
end